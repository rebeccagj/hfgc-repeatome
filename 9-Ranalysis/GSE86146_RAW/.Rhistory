pgccells <- MeanVarPlot(pgccells ,fxn.x = expMean, fxn.y = logVarDivMean, x.low.cutoff = 0.0125, x.high.cutoff = 3, y.cutoff = 0.5, do.contour = T, cex.use = 1, cex.text.use = 1)
length(pgccells@var.genes)
pgccells <- PCA(pgccells, pc.genes = pgccells@var.genes, do.print = TRUE, pcs.print = 9, pcs.store = 50, genes.print = 5)
pgccells <- ProjectPCA(pgccells, pcs.print = 9)
PCElbowPlot(pgccells, num.pc = 50) #determine # of pcas to define
VizPCA(pgccells, 1:12)
PCHeatmap(pgccells, pc.use = 1, do.balanced = TRUE)
PCHeatmap(pgccells, pc.use = 2, do.balanced = TRUE)
PCHeatmap(pgccells, pc.use = 3, do.balanced = TRUE)
PCHeatmap(pgccells, pc.use = 4, do.balanced = TRUE)
PCHeatmap(pgccells, pc.use = 5, do.balanced = TRUE)
PCHeatmap(pgccells, pc.use = 6, do.balanced = TRUE)
PCHeatmap(pgccells, pc.use = 7, do.balanced = TRUE)
PCHeatmap(pgccells, pc.use = 8, do.balanced = TRUE)
PCHeatmap(pgccells, pc.use = 9, do.balanced = TRUE)
PCHeatmap(pgccells, pc.use = 10, do.balanced = TRUE)
PCHeatmap(pgccells, pc.use = 11, do.balanced = TRUE)
PCHeatmap(pgccells, pc.use = 12, do.balanced = TRUE)
PCHeatmap(pgccells, pc.use = 1:12, do.balanced = TRUE)
pgc.only <- JackStraw(pgccells, num.pc = 12, num.replicate = 100, do.print = T)
JackStrawPlot(pgccells, PCs = 1:12)
save.image("~/Documents/Graduate_School/Laird_Lab/Experiments/RJ23_e10-5_transposon_alignment/20170809_e10-5_transponon_analysis.RData")
pgc.only <- JackStraw(pgccells, num.pc = 12, num.replicate = 100, do.print = T)
JackStrawPlot(pgccells, PCs = 1:12)
pgccells <- FindClusters(pgccells, pc.use = 1:7, resolution = 0.6, print.output = 0, save.SNN = T)
pgccells <- FindClusters(pgccells, pc.use = 1:9, resolution = 0.6, print.output = 0, save.SNN = T)
pgccells <- RunTSNE(pgccells, dims.use = 1:9, do.fast = F)
TSNEPlot(pgccells, do.label = T, colors.use = tsnecolor, no.legend = T, pt.size = 3, label.size = 10)
PCAPlot(pgccells, do.label = T, cols.use = tsnecolor, no.legend = T)
FeaturePlot(pgccells, c('nUMI'),cols.use = rainbow, pt.size = 3)
FeaturePlot(pgccells, c('Dppa3', 'Pou5f1'),cols.use = rainbow, pt.size = 2)
current.pgconly.ids = c('0', '1', '2')
new.pgconly.ids = c('PGC2', 'PGC1', 'PGC3')
pgccells@ident = plyr::mapvalues(pgccells@ident, from = current.pgconly.ids, to = new.pgconly.ids)
TSNEPlot(pgccells, do.label = T, colors.use = tsnecolor, no.legend = T, pt.size = 3, label.size = 10)
VlnPlot(TSNEPlot(pgccells, do.label = T, colors.use = tsnecolor, no.legend = T, pt.size = 3, label.size = 10), c('Dppa5a', 'Dppa3', 'Rhox9', 'Rhox5'), cols.use = tsnecolor)
VlnPlot(pgccells, do.label = T, colors.use = tsnecolor, no.legend = T, pt.size = 3, label.size = 10), c('Dppa5a', 'Dppa3', 'Rhox9', 'Rhox5'), cols.use = tsnecolor)
VlnPlot(pgccells, do.label = T, colors.use = tsnecolor, no.legend = T, pt.size = 3, label.size = 10, features.plot = c('Dppa5a', 'Dppa3', 'Rhox9', 'Rhox5'), cols.use = tsnecolor)
VlnPlot(pgccells, do.label = T, features.plot = c('Dppa5a', 'Dppa3', 'Rhox9', 'Rhox5'), cols.use = tsnecolor)
VlnPlot(pgccells, features.plot = c('Dppa5a', 'Dppa3', 'Rhox9', 'Rhox5'), cols.use = tsnecolor)
save(pgccells, file = "~/Documents/e10-5_PGC/PGCs_10_5/outs/20170526PGCanalysis.Robj")
save(pgccells, file = "~/Documents/Graduate_School/Laird_Lab/Experiments/RJ23_e10-5_transposon_alignment/20170809_e10-5_transponon_analysis_de.Robj")
#Ensuring this script works on a fresh install of R
install.packages("devtools")
help(install_url)("https://github.com/satijalab/seurat/releases/download/v1.4.0/Seurat_1.4.0.14.tgz", binary = TRUE)
install.packages("dplyr")
install.packages("Matrix")
install.packages("parallel")
#load packages for this code
library(devtools)
library(Seurat)
library(dplyr)
library(Matrix)
library(parallel)
watermelon = c('#8e0152','#c51b7d','#de77ae','#f1b6da','#b8e186','#7fbc41','#4d9221','#276419')
watermelon1 = c('#b8e186','#8e0152','#de77ae','#4d9221','#7fbc41','#276419')
watermelon2 = c('#f1b6da','#8e0152f1b6da','#4d9221')
rainbow = c('purple', 'blue', 'green', 'gold', 'orange', 'red')
rainbow1 = c('purple', 'blue', 'goldenrod2', 'darkgreen', 'darkorange3', 'red')
rainbow2 = c('blue', 'goldenrod2', 'red')
tsnecolor = c('darkgoldenrod','darkgreen','darkblue')
#Load the PBMC dataset from whatever directory in which it is stored
pgcdata <- Read10X("~/Documents/e10-5_PGC/PGCs_10_5/outs/filtered_gene_bc_matrices/mm10/")
#Examine the memory savings between regular and sparse matrices
dense.size <- object.size(as.matrix(pgcdata))
dense.size
#108031800 bytes
sparse.size <- object.size('pgcdata')
sparse.size
# 27815328 bytes
dense.size/sparse.size
## 3.88389452031628 bytes
# Initialize the Seurat object with the raw (non-normalized data)
# Note that this is slightly different than the older Seurat workflow, where log-normalized values were passed in directly.
# You can continue to pass in log-normalized values, just set do.logNormalize=F in the next step.
pgccells <- new("seurat", raw.data = pgcdata)
# Keep all genes expressed in >= 3 cells, keep all cells with >= 200 genes
# Perform log-normalization, first scaling each cell to a total of 1e4 molecules (as in Macosko et al. Cell 2015)
pgccells <- Setup(pgccells, min.cells = 3, min.genes = 200, do.logNormalize = T, total.expr = 1e4, project = "10X_PGC_e10-5")
#pgccells = no filtering yet
mito.genes <- grep("^mt-", rownames(pgccells@data), value = T)
percent.mito <- colSums(expm1(pgccells@data[mito.genes, ]))/colSums(expm1(pgccells@data))
#AddMetaData adds columns to object@data.info, and is a great place to stash QC stats
pgccells <- AddMetaData(pgccells, percent.mito, "percent.mito")
VlnPlot(pgccells, c("nGene", "nUMI", "percent.mito"), nCol = 3)
#GenePlot is typically used to visualize gene-gene relationships,
#but can be used for anything calculated by the object, i.e. columns in object@data.info, PC scores etc.
#Since there is a rare subset of cells with an outlier level of high mitochondrial percentage,
#and also low UMI content, we filter these as well
par(mfrow = c(1, 2))
GenePlot(pgccells, "nUMI", "percent.mito", cex.use = 1)
GenePlot(pgccells, "nUMI", "nGene")
#this double spread by be a biological cell type thing
#should color by PGC or ? marker
#Can filter out cells that have unique gene counts over a normal range/distribution,
#but I'm not filtering anything yet
#Note that accept.high and accept.low can be used to define a 'gate',
#and can filter cells not only based on nGene but on anything in the object (as in GenePlot above)
#excluding weird blood cells from pgccells
bloodgenes = c('Hba-a1',"Hbb-bs", "Hbb-bt", "Hemgn", "Hbb-bh1", 'Hba-x', 'Hba-x', 'Hba-a2', 'Hbb-y')
percentbld <- colSums(expm1(pgccells@data[bloodgenes, ]))/colSums(expm1(pgccells@data))
pgccells <- AddMetaData(pgccells, percentbld, "percentbld")
VlnPlot(pgccells, c("nGene", "nUMI", "percentbld"), nCol = 3)
GenePlot(pgccells, "nUMI", "percentbld", cex.use = 1)
pgccells <- SubsetData(pgccells, subset.name = "percentbld", accept.high = 0.25)
install.packages("dplyr")
install.packages("dplyr")
#load packages for this code
library(devtools)
library(Seurat)
library(dplyr)
library(Matrix)
library(parallel)
watermelon = c('#8e0152','#c51b7d','#de77ae','#f1b6da','#b8e186','#7fbc41','#4d9221','#276419')
watermelon1 = c('#b8e186','#8e0152','#de77ae','#4d9221','#7fbc41','#276419')
watermelon2 = c('#f1b6da','#8e0152f1b6da','#4d9221')
rainbow = c('purple', 'blue', 'green', 'gold', 'orange', 'red')
rainbow1 = c('purple', 'blue', 'goldenrod2', 'darkgreen', 'darkorange3', 'red')
rainbow2 = c('blue', 'goldenrod2', 'red')
tsnecolor = c('darkgoldenrod','darkgreen','darkblue')
#Load the PBMC dataset from whatever directory in which it is stored
pgcdata <- Read10X("~/Documents/e10-5_PGC/PGCs_10_5/outs/filtered_gene_bc_matrices/mm10/")
#Examine the memory savings between regular and sparse matrices
dense.size <- object.size(as.matrix(pgcdata))
dense.size
#108031800 bytes
sparse.size <- object.size('pgcdata')
sparse.size
# 27815328 bytes
dense.size/sparse.size
## 3.88389452031628 bytes
# Initialize the Seurat object with the raw (non-normalized data)
# Note that this is slightly different than the older Seurat workflow, where log-normalized values were passed in directly.
# You can continue to pass in log-normalized values, just set do.logNormalize=F in the next step.
pgccells <- new("seurat", raw.data = pgcdata)
# Keep all genes expressed in >= 3 cells, keep all cells with >= 200 genes
# Perform log-normalization, first scaling each cell to a total of 1e4 molecules (as in Macosko et al. Cell 2015)
pgccells <- Setup(pgccells, min.cells = 3, min.genes = 200, do.logNormalize = T, total.expr = 1e4, project = "10X_PGC_e10-5")
#pgccells = no filtering yet
mito.genes <- grep("^mt-", rownames(pgccells@data), value = T)
percent.mito <- colSums(expm1(pgccells@data[mito.genes, ]))/colSums(expm1(pgccells@data))
#AddMetaData adds columns to object@data.info, and is a great place to stash QC stats
pgccells <- AddMetaData(pgccells, percent.mito, "percent.mito")
VlnPlot(pgccells, c("nGene", "nUMI", "percent.mito"), nCol = 3)
#GenePlot is typically used to visualize gene-gene relationships,
#but can be used for anything calculated by the object, i.e. columns in object@data.info, PC scores etc.
#Since there is a rare subset of cells with an outlier level of high mitochondrial percentage,
#and also low UMI content, we filter these as well
par(mfrow = c(1, 2))
GenePlot(pgccells, "nUMI", "percent.mito", cex.use = 1)
GenePlot(pgccells, "nUMI", "nGene")
#this double spread by be a biological cell type thing
#should color by PGC or ? marker
#Can filter out cells that have unique gene counts over a normal range/distribution,
#but I'm not filtering anything yet
#Note that accept.high and accept.low can be used to define a 'gate',
#and can filter cells not only based on nGene but on anything in the object (as in GenePlot above)
#excluding weird blood cells from pgccells
bloodgenes = c('Hba-a1',"Hbb-bs", "Hbb-bt", "Hemgn", "Hbb-bh1", 'Hba-x', 'Hba-x', 'Hba-a2', 'Hbb-y')
percentbld <- colSums(expm1(pgccells@data[bloodgenes, ]))/colSums(expm1(pgccells@data))
pgccells <- AddMetaData(pgccells, percentbld, "percentbld")
VlnPlot(pgccells, c("nGene", "nUMI", "percentbld"), nCol = 3)
GenePlot(pgccells, "nUMI", "percentbld", cex.use = 1)
pgccells <- SubsetData(pgccells, subset.name = "percentbld", accept.high = 0.25)
GenePlot(pgccells, "nUMI", "percentbld", cex.use = 1)
allcells <- MeanVarPlot(pgccells ,fxn.x = expMean, fxn.y = logVarDivMean, x.low.cutoff = 0.0125, x.high.cutoff = 3, y.cutoff = 0.5, do.contour = T, cex.use = 1, cex.text.use = 1)
length(allcells@var.genes)
#2533 total genes
allcells <- PCA(allcells, pc.genes = allcells@var.genes, do.print = TRUE, pcs.print = 9, pcs.store = 50, genes.print = 5)
allcells <- ProjectPCA(allcells, pcs.print = 9, pcs.store = 50)
PCElbowPlot(allcells, num.pc = 50) #determine # of pcas to define
VizPCA(allcells, 1:12)
#PC1,2,5,6,7,8,9 have good splits
PCHeatmap(allcells, pc.use = 1, cells.use = 600, do.balanced = TRUE)
PCHeatmap(allcells, pc.use = 2, cells.use = 600, do.balanced = TRUE)
PCHeatmap(allcells, pc.use = 3, cells.use = 600, do.balanced = TRUE)
PCHeatmap(allcells, pc.use = 4, cells.use = 600, do.balanced = TRUE)
PCHeatmap(allcells, pc.use = 5, cells.use = 600, do.balanced = TRUE)
PCHeatmap(allcells, pc.use = 6, cells.use = 600, do.balanced = TRUE)
PCHeatmap(allcells, pc.use = 7, cells.use = 600, do.balanced = TRUE)
PCHeatmap(allcells, pc.use = 8, cells.use = 600, do.balanced = TRUE)
PCHeatmap(allcells, pc.use = 9, cells.use = 600, do.balanced = TRUE)
PCHeatmap(allcells, pc.use = 1:9, cells.use = 600, do.balanced = TRUE)
allcells <- FindClusters(allcells, pc.use = 1:9, resolution = 0.6, print.output = 0, save.SNN = T)
allcells <- RunTSNE(allcells, dims.use = 1:9, do.fast = T)
TSNEPlot(allcells,  do.label = T, colors.use = watermelon1, no.legend = T, pt.size = 3, label.size = 10)
old.allcells.ids <- c(0, 1, 2, 3, 4)
new.allcells.ids <- c("non-PGC", "PGC 1", "PGC 2", "non-PGC", "non-PGC")
allcells@ident <- plyr::mapvalues(allcells@ident, from = old.allcells.ids, to = new.allcells.ids)
TSNEPlot(allcells,  do.label = T, colors.use = watermelon1, no.legend = T, pt.size = 3, label.size = 10)
PCAPlot(allcells, do.label = T, cols.use = watermelon1, no.legend = T)
FeaturePlot(allcells, features.plot = c('Dppa3', 'Pou5f1'))
FeaturePlot(allcells, features.plot = c('Dppa3', 'Pou5f1'), reduction.use = 'pca')
#pgc only from here down
pgc.barcodes = names(allcells@ident[(allcells@ident %in% c('PGC 1','PGC 2'))])
pgccells = SubsetData(allcells, cells.use = pgc.barcodes)
#could also look at % ribosomal content
mitogenes <- grep("^mt-", rownames(pgccells@data), value = T)
mitogenes
percentmito <- colSums(expm1(pgccells@data[mito.genes, ]))/colSums(expm1(pgccells@data))
#pgc.only, now with mito metadata and stuff for QC
pgccells <- AddMetaData(pgccells, percentmito, "percentmito")
VlnPlot(pgccells, c("nGene", "nUMI", "percentmito"), nCol = 3)
par(mfrow = c(1, 2))
GenePlot(pgccells, "nUMI", "percentmito", cex.use = 1, col.use = rainbow2)
GenePlot(pgccells, "nUMI", "nGene")
pgccells <- SubsetData(pgccells, subset.name = "percentmito", accept.high = 0.025)
par(mfrow = c(1, 2))
GenePlot(pgccells, "nUMI", "percentmito", cex.use = 1)
GenePlot(pgccells, "nUMI", "nGene")
VlnPlot(pgccells, c("nGene", "nUMI", "percentmito"), nCol = 3)
pgccells <- MeanVarPlot(pgccells ,fxn.x = expMean, fxn.y = logVarDivMean, x.low.cutoff = 0.0125, x.high.cutoff = 3, y.cutoff = 0.5, do.contour = T, cex.use = 1, cex.text.use = 1)
length(pgccells@var.genes)
#3794 total genes with 6% mito
#3765 total genes with 5% mito
#3131 total genes with 2.5% mito
pgccells <- PCA(pgccells, pc.genes = pgccells@var.genes, do.print = TRUE, pcs.print = 9, pcs.store = 50, genes.print = 5)
pgccells <- ProjectPCA(pgccells, pcs.print = 9)
PCElbowPlot(pgccells, num.pc = 50) #determine # of pcas to define
VizPCA(pgccells, 1:12)
PCHeatmap(pgccells, pc.use = 1, do.balanced = TRUE)
PCHeatmap(pgccells, pc.use = 2, do.balanced = TRUE)
PCHeatmap(pgccells, pc.use = 3, do.balanced = TRUE)
PCHeatmap(pgccells, pc.use = 4, do.balanced = TRUE)
PCHeatmap(pgccells, pc.use = 5, do.balanced = TRUE)
PCHeatmap(pgccells, pc.use = 6, do.balanced = TRUE)
PCHeatmap(pgccells, pc.use = 7, do.balanced = TRUE)
PCHeatmap(pgccells, pc.use = 8, do.balanced = TRUE)
PCHeatmap(pgccells, pc.use = 9, do.balanced = TRUE)
PCHeatmap(pgccells, pc.use = 10, do.balanced = TRUE)
PCHeatmap(pgccells, pc.use = 11, do.balanced = TRUE)
PCHeatmap(pgccells, pc.use = 12, do.balanced = TRUE)
PCHeatmap(pgccells, pc.use = 1:12, do.balanced = TRUE)
pgc.only <- JackStraw(pgccells, num.pc = 9, num.replicate = 100, do.print = T)
JackStrawPlot(pgccells, PCs = 1:9)
pgccells <- FindClusters(pgccells, pc.use = 1:7, resolution = 0.6, print.output = 0, save.SNN = T)
pgccells <- RunTSNE(pgccells, dims.use = 1:7, do.fast = F)
TSNEPlot(pgccells, do.label = T, colors.use = tsnecolor, no.legend = T, pt.size = 3, label.size = 10)
PCAPlot(pgccells, do.label = T, cols.use = tsnecolor, no.legend = T)
FeaturePlot(pgccells, c('nUMI'),cols.use = rainbow, pt.size = 3)
FeaturePlot(pgccells, c('Dppa3', 'Pou5f1'),cols.use = rainbow, pt.size = 2)
#rename clusters
current.pgconly.ids = c('0', '1', '2')
new.pgconly.ids = c('PGC2', 'PGC3', 'PGC1')
pgccells@ident = plyr::mapvalues(pgccells@ident, from = current.pgconly.ids, to = new.pgconly.ids)
TSNEPlot(pgccells, do.label = T, colors.use = tsnecolor, no.legend = T, pt.size = 3, label.size = 10)
#violin plot showing probability density at different expression levels of the gene for each cluster
VlnPlot(TSNEPlot(pgccells, do.label = T, colors.use = tsnecolor, no.legend = T, pt.size = 3, label.size = 10), c('Dppa5a', 'Dppa3', 'Rhox9', 'Rhox5'), cols.use = tsnecolor)
save(pgccells, file = "~/Documents/e10-5_PGC/PGCs_10_5/outs/20170526PGCanalysis.Robj")
save.image("~/Documents/R/20170526_Seurat_e10-5_PCG_subsetPGCs.RData")
FeaturePlot(pgc.only, c("Cdk4","Nudt21","Gtfa2","Tmem14c","Crip2","Birc5","1500009L16Ri"), cols.use = rainbow1)
top10 = all.markers %>% group_by(cluster) %>% top_n(10, avg_diff)
DoHeatmap(pgccells, genes.use = top10$gene, order.by.ident = TRUE, slim.col.label = T, remove.key = F, cexRow = .75, cex.col = 1)
top20 = all.markers %>% group_by(cluster) %>% top_n(20, avg_diff)
DoHeatmap(pgccells, genes.use = top20$gene, order.by.ident = TRUE, slim.col.label = TRUE, remove.key = F, cexRow = .75, cex.col = 1)
library(dplyr)
top10 = all.markers %>% group_by(cluster) %>% top_n(10, avg_diff)
DoHeatmap(pgccells, genes.use = top10$gene, order.by.ident = TRUE, slim.col.label = T, remove.key = F, cexRow = .75, cex.col = 1)
top20 = all.markers %>% group_by(cluster) %>% top_n(20, avg_diff)
DoHeatmap(pgccells, genes.use = top20$gene, order.by.ident = TRUE, slim.col.label = TRUE, remove.key = F, cexRow = .75, cex.col = 1)
all.markers <- FindAllMarkers(pgccells, only.pos = TRUE, min.pct = 0.1, thresh.use = 0.25)
all.markers %>% group_by(cluster) %>% top_n(2, avg_diff)
top10 = all.markers %>% group_by(cluster) %>% top_n(10, avg_diff)
DoHeatmap(pgccells, genes.use = top10$gene, order.by.ident = TRUE, slim.col.label = T, remove.key = F, cexRow = .75, cex.col = 1)
top20 = all.markers %>% group_by(cluster) %>% top_n(20, avg_diff)
DoHeatmap(pgccells, genes.use = top20$gene, order.by.ident = TRUE, slim.col.label = TRUE, remove.key = F, cexRow = .75, cex.col = 1)
PCHeatmap(pgccells, pc.use = 1:12, do.balanced = TRUE)
pgc.only <- JackStraw(pgccells, num.pc = 9, num.replicate = 100, do.print = T)
pgccells <- FindClusters(pgccells, pc.use = 1:7, resolution = 0.6, print.output = 0, save.SNN = T)
pgccells <- RunTSNE(pgccells, dims.use = 1:7, do.fast = F)
TSNEPlot(pgccells, do.label = T, colors.use = tsnecolor, no.legend = T, pt.size = 3, label.size = 10)
current.pgconly.ids = c('0', '1', '2')
new.pgconly.ids = c('PGC2', 'PGC1', 'PGC3')
pgccells@ident = plyr::mapvalues(pgccells@ident, from = current.pgconly.ids, to = new.pgconly.ids)
TSNEPlot(pgccells, do.label = T, colors.use = tsnecolor, no.legend = T, pt.size = 3, label.size = 10)
save(pgccells, file = "~/Documents/e10-5_PGC/PGCs_10_5/outs/20170526PGCanalysis.Robj")
top10 = all.markers %>% group_by(cluster) %>% top_n(10, avg_diff)
DoHeatmap(pgccells, genes.use = top10$gene, order.by.ident = TRUE, slim.col.label = T, remove.key = F, cexRow = .75, cex.col = 1)
top20 = all.markers %>% group_by(cluster) %>% top_n(20, avg_diff)
DoHeatmap(pgccells, genes.use = top20$gene, order.by.ident = TRUE, slim.col.label = TRUE, remove.key = F, cexRow = .75, cex.col = 1)
FeaturePlot(pgc.only, c("Cdk4","Nudt21","Tmem14c","Crip2","Birc5","1500009L16Ri"), cols.use = rainbow1)
FeaturePlot(pgc.only, c("Cdk4","Nudt21","Tmem14c","Crip2","Birc5"), cols.use = rainbow1)
help(FindMarkers)
genesPGC1 = as.list(markersPGC1[1:12,1])
FeaturePlot(pgccells, genesPGC1$Genes, cols.use = rainbow2)
library(devtools)
library(Seurat)
library(dplyr)
library(Matrix)
library(parallel)
watermelon = c('#8e0152','#c51b7d','#de77ae','#f1b6da','#b8e186','#7fbc41','#4d9221','#276419')
watermelon1 = c('#b8e186','#8e0152','#de77ae','#4d9221','#7fbc41','#276419')
watermelon2 = c('#f1b6da','#8e0152f1b6da','#4d9221')
rainbow = c('purple', 'blue', 'green', 'gold', 'orange', 'red')
rainbow1 = c('purple', 'blue', 'goldenrod2', 'darkgreen', 'darkorange3', 'red')
rainbow2 = c('blue', 'goldenrod2', 'red')
tsnecolor = c('darkgoldenrod','darkgreen','darkblue')
pgcdata <- Read10X("~/Documents/e10-5_PGC/PGCs_10_5/outs/filtered_gene_bc_matrices/mm10/")
dense.size <- object.size(as.matrix(pgcdata))
dense.size
sparse.size <- object.size('pgcdata')
sparse.size
load("/Users/Rebecca/Documents/Graduate_School/Laird_Lab/Experiments/RJ23_e10-5_transposon_alignment/20170809_e10-5_transponon_analysis.RData")
PGC1roc <- FindMarkers(pgccells, ident.1 = 'PGC1', thresh.use = 0.25, test.use = "roc", only.pos = T, print.bar = T)
PCAPlot(allcells, do.label = T, cols.use = watermelon1, no.legend = T)
TSNEPlot(allcells,  do.label = T, colors.use = watermelon1, no.legend = T, pt.size = 3, label.size = 10)
help(getSRAfile)
library(SRAdb)
library(DBI)
help(getSRAfile)
#Ensuring this script works on a fresh install of R
install.packages("devtools")
install.packages('Seurat'))
install.packages('Seurat')
install.packages("Seurat")
install.packages("Seurat")
install.packages("Seurat")
install.packages("dplyr")
install.packages("dplyr")
install.packages("Matrix")
install.packages("Matrix")
install.packages("Matrix")
#load packages for this code
library(devtools)
library(Seurat)
library(dplyr)
library(Matrix)
#Load the PBMC dataset from whatever directory in which it is stored
pgcdata <- Read10X("~/Documents/e10-5_PGC/PGCs_10_5/outs/filtered_gene_bc_matrices/mm10/")
# Initialize the Seurat object with the raw (non-normalized data)
# Note that this is slightly different than the older Seurat workflow, where log-normalized values were passed in directly.
# You can continue to pass in log-normalized values, just set do.logNormalize=F in the next step.
pgccells <- new("seurat", raw.data = pgcdata)
# Keep all genes expressed in >= 3 cells, keep all cells with >= 200 genes
# Perform log-normalization, first scaling each cell to a total of 1e4 molecules (as in Macosko et al. Cell 2015)
pgccells <- Setup(pgccells, min.cells = 3, min.genes = 200, do.logNormalize = T, total.expr = 1e4, project = "10X_PGC_e10-5")
library(Seurat
library(Seurat)
library(Seurat)
#download 4 of 4, gene expression data from Su et al 2004 (PMC395923)
source("http://bioconductor.org/biocLite.R") #start bioconductor
biocLite()
install.packages("Seurat")
biocLite("Seurat")
library(Seurat)
cite(Seurat)
citation(Seurat)
citation('Seurat')
#function for inputting data and assigning to global environment ####
readrenamecol = function(arg1, arg2){
arg1 = read.delim(file = arg2, header = T, sep = "\t", row.names = 1)
}
setwd("/Users/Rebecca/Documents/Graduate_School/Laird_Lab/Experiments/RJ31-LiLi_et_al_2017-HFGC_TE-alignment/9-Ranalysis/GSE86146_RAW/") #set wd to directory with UMI_Tools tsv file outputs
all19W = read.table("allGSM.txt", row.names = 1)
all19W = read.table("allGSM.txt")
all19W = read.delim("allGSM.txt")
all19W = read.csv("allGSM.txt")
View(all19W)
all19W = read.csv("allGSM.txt", sep = "\t")
rm(all19W)
#read in the 6, 19W samples ####
gsm28 = readrenamecol(gsm28, "GSM2306028_M_19W_embryo1_101_gene_expression.txt")
gsm29 = readrenamecol(gsm29, "GSM2306029_M_19W_embryo1_24_gene_expression.txt")
gsm30 = readrenamecol(gsm30, "GSM2306030_M_19W_embryo1_26_gene_expression.txt")
gsm31 = readrenamecol(gsm31, "GSM2306031_M_19W_embryo2_102_gene_expression.txt")
gsm32 = readrenamecol(gsm32, "GSM2306032_M_19W_embryo2_103_gene_expression.txt")
gsm33 = readrenamecol(gsm33, "GSM2306033_M_19W_embryo2_104_gene_expression.txt")
class(gsm28)
all19W = read.csv("allGSM.txt", sep = "\t")
all19W = read.csv("GSE86146_RAW_all19Wcounts.txt", sep = "\t")
all19W = read.csv("GSE86146_RAW_all19Wcounts.txt", sep = "\t", row.names = 1)
View(all19W)
all19W = read.csv("GSE86146_RAW_all19Wcounts.txt", sep = "\t", row.names = 2)
View(all19W)
all19W = all19W[-1]
View(all19W)
w19 = as(as.matrix(all19W), "dgCMatrix")
# start analysis ####
library(Seurat)
w19 = as(as.matrix(all19W), "dgCMatrix")
w19 <- CreateSeuratObject(raw.data = w19, min.cells = 3, low.thresholds=500, high.thresholds= Inf)
w19 <- CreateSeuratObject(raw.data = w19)
rm(gsm28,gsm29,gsm30,gsm31,gsm32,gsm33)
w19 <- FilterCells(w19, subset.names = "nGene", low.thresholds = 500)
w19 <- NormalizeData(w19)
w19 <- CreateSeuratObject(raw.data = all19W, min.cells = 3, min.genes = 200, project = "hFGC19")
w19 <- CreateSeuratObject(raw.data = w19)
w19 = as(as.matrix(all19W), "dgCMatrix")
w19 <- CreateSeuratObject(raw.data = w19)
all19W_matrix = as(as.matrix(all19W), "dgCMatrix")
w19 <- CreateSeuratObject(raw.data = all19W_matrix)
w19 <- CreateSeuratObject(raw.data = all19W_matrix, min.cells = 3, min.genes = 200, project = "hFGC19")
mito.genes <- grep(pattern = "^MT-", x = rownames(x = w19@data), value = TRUE)
mito.genes <- grep(pattern = "^mt-", x = rownames(x = w19@data), value = TRUE)
mito.genes <- grep(pattern = "NANOG", x = rownames(x = w19@data), value = TRUE)
rm(mito.genes)
w19 <- CreateSeuratObject(raw.data = all19W_matrix, min.cells = 10, min.genes = 2000, project = "hFGC19")
VlnPlot(object = w19, features.plot = c("nGene", "nUMI"), nCol = 2)
w19 <- CreateSeuratObject(raw.data = all19W_matrix, min.cells = 10, min.genes = 200, project = "hFGC19")
VlnPlot(object = w19, features.plot = c("nGene", "nUMI"), nCol = 2)
?VlnPlot
GenePlot(object = w19, gene1 = "nUMI", gene2 = "nGene")
?NormalizeData
w19 <- ?NormalizeData(object = w19, normalization.method = "LogNormalize", scale.factor = 10000)
w19 <- CreateSeuratObject(raw.data = all19W_matrix, min.cells = 10, min.genes = 200, project = "hFGC19")
w19 <- NormalizeData(object = w19, normalization.method = "LogNormalize", scale.factor = 10000)
w19 <- FindVariableGenes(object = w19, mean.function = ExpMean, dispersion.function = LogVMR, x.low.cutoff = 0.0125, x.high.cutoff = 3, y.cutoff = 0.5)
length(x = w19@var.genes)
?RunPCA
w19 <- ?RunPCA(object = w19, pc.genes = w19@var.genes, pcs.compute = 20, do.print = TRUE, pcs.print = 1:5, genes.print = 5)
w19 <- RunPCA(object = w19, pc.genes = w19@var.genes, pcs.compute = 20, do.print = TRUE, pcs.print = 1:5, genes.print = 5)
w19 <- CreateSeuratObject(raw.data = all19W_matrix, min.cells = 10, min.genes = 200, project = "hFGC19")
VlnPlot(object = w19, features.plot = c("nGene", "nUMI"), nCol = 2)
GenePlot(object = w19, gene1 = "nUMI", gene2 = "nGene")
w19 <- NormalizeData(object = w19, normalization.method = "LogNormalize", scale.factor = 10000)
w19 <- FindVariableGenes(object = w19, mean.function = ExpMean, dispersion.function = LogVMR, x.low.cutoff = 0.0125, x.high.cutoff = 3, y.cutoff = 0.5)
length(x = w19@var.genes)
w19 <- RunPCA(object = w19, pc.genes = w19@var.genes, pcs.compute = 20, do.print = TRUE, pcs.print = 1:5, genes.print = 5)
w19 <- FindVariableGenes(object = w19, mean.function = ExpMean, dispersion.function = LogVMR, x.low.cutoff = 2, x.high.cutoff = Inf, y.cutoff = 2)
length(x = w19@var.genes)
w19 <- CreateSeuratObject(raw.data = all19W_matrix, min.cells = 10, min.genes = 1, project = "hFGC19")
w19 <- NormalizeData(object = w19, normalization.method = "LogNormalize", scale.factor = 10000)
w19 <- FindVariableGenes(object = w19, mean.function = ExpMean, dispersion.function = LogVMR, x.low.cutoff = 2, x.high.cutoff = Inf, y.cutoff = 2)
length(x = w19@var.genes)
?CreateSeuratObject
w19 <- ?CreateSeuratObject(raw.data = all19W_matrix, min.cells = 10, is.expr = 1, project = "hFGC19")
VlnPlot(object = w19, features.plot = c("nGene", "nUMI"), nCol = 2)
w19 <- CreateSeuratObject(raw.data = all19W_matrix, min.cells = 10, is.expr = 1, project = "hFGC19")
VlnPlot(object = w19, features.plot = c("nGene", "nUMI"), nCol = 2)
GenePlot(object = w19, gene1 = "nUMI", gene2 = "nGene")
w19 <- NormalizeData(object = w19, normalization.method = "LogNormalize", scale.factor = 10000)
w19 <- FindVariableGenes(object = w19, mean.function = ExpMean, dispersion.function = LogVMR, x.low.cutoff = 2, x.high.cutoff = Inf, y.cutoff = 2)
length(x = w19@var.genes)
View(w19)
w19 <- CreateSeuratObject(raw.data = all19W_matrix, min.cells = 5, is.expr = 1, project = "hFGC19")
VlnPlot(object = w19, features.plot = c("nGene", "nUMI"), nCol = 2)
GenePlot(object = w19, gene1 = "nUMI", gene2 = "nGene")
w19 <- NormalizeData(object = w19, normalization.method = "LogNormalize", scale.factor = 10000)
w19 <- FindVariableGenes(object = w19, mean.function = ExpMean, dispersion.function = LogVMR, x.low.cutoff = 2, x.high.cutoff = Inf, y.cutoff = 2)
length(x = w19@var.genes)
w19 <- FindVariableGenes(object = w19, mean.function = ExpMean, dispersion.function = LogVMR, x.low.cutoff = 1, x.high.cutoff = Inf, y.cutoff = 1)
length(x = w19@var.genes)
w19 <- FindVariableGenes(object = w19, mean.function = ExpMean, dispersion.function = LogVMR, x.low.cutoff = 0.5, x.high.cutoff = Inf, y.cutoff = 0.5)
length(x = w19@var.genes)
w19 <- FindVariableGenes(object = w19, mean.function = ExpMean, dispersion.function = LogVMR, x.low.cutoff = 0.6, x.high.cutoff = Inf, y.cutoff = 0.6)
length(x = w19@var.genes)
w19 <- FindVariableGenes(object = w19, mean.function = ExpMean, dispersion.function = LogVMR, x.low.cutoff = 0.5, x.high.cutoff = Inf, y.cutoff = 0.5)
length(x = w19@var.genes)
w19 <- RunPCA(object = w19, pc.genes = w19@var.genes, pcs.compute = 20, do.print = TRUE, pcs.print = 1:5, genes.print = 5)
w19 <- ScaleData(object = w19, vars.to.regress = c("nUMI"))
w19 <- RunPCA(object = w19, pc.genes = w19@var.genes, pcs.compute = 20, do.print = TRUE, pcs.print = 1:5, genes.print = 5)
PCAPlot(object = w19, dim.1 = 1, dim.2 = 2)
?PCHeatmap
length(w19@cell.names)
length(w19@scale.data)
PCHeatmap(object = pbmc, pc.use = 1:5, cells.use = 195, do.balanced = TRUE, label.columns = FALSE)
PCHeatmap(object = w19, pc.use = 1:5, cells.use = 195, do.balanced = TRUE, label.columns = FALSE)
JackStrawPlot(object = w19, PCs = 1:20)
w19 <- JackStraw(object = w19, num.replicate = 100, do.print = FALSE)
JackStrawPlot(object = w19, PCs = 1:20)
PCElbowPlot(object = w19)
w19 <- FindClusters(object = w19, reduction.type = "pca", dims.use = 1:10, resolution = 0.6, print.output = 0, save.SNN = TRUE)
w19 <- RunTSNE(object = w19, dims.use = 1:10, do.fast = TRUE)
TSNEPlot(w19, do.label = T)
VlnPlot(object = w19, features.plot = c("NANOG", "DPPA3", "POU5F1"))
FeaturePlot(object = pbmc, features.plot = c("NANOG", "DPPA3", "POU5F1"), reduction.use = "tsne")
FeaturePlot(object = w19, features.plot = c("NANOG", "DPPA3", "POU5F1"), reduction.use = "tsne")
FeaturePlot(object = w19, features.plot = c("NANOG", "DPPA3", "POU5F1"), reduction.use = "pca")
FeaturePlot(object = w19, features.plot = c("NANOG", "DPPA3", "POU5F1", "DAZL", "DDX4"), reduction.use = "tsne")
FeaturePlot(object = w19, features.plot = c("NANOG", "DPPA3", "POU5F1", "DAZL", "DDX4"), reduction.use = "pca")
w19 <- RunTSNE(object = w19, dims.use = 1:10, do.fast = TRUE)
TSNEPlot(w19, do.label = T)
FeaturePlot(object = w19, features.plot = c("NANOG", "DPPA3", "POU5F1", "DAZL", "DDX4"), reduction.use = "tsne")
PCAPlot(object = w19, dim.1 = 1, dim.2 = 2)
FeaturePlot(object = w19, features.plot = c("NANOG", "DPPA3", "POU5F1", "DAZL", "DDX4"), reduction.use = "pca")
VlnPlot(object = w19, features.plot = c("NANOG", "DPPA3", "POU5F1", "DAZL", "DDX4"))
?PCHeatmap
PCHeatmap(object = w19, pc.use = 1:5, cells.use = 195, do.balanced = TRUE, label.columns = FALSE, col.use = c("blue", "green"), remove.key = F)
PCHeatmap(object = w19, pc.use = 1:5, cells.use = 195, do.balanced = TRUE, label.columns = FALSE, col.use = c("black", "green"), remove.key = F)
PCHeatmap(object = w19, pc.use = 1:5, cells.use = 195, do.balanced = TRUE, label.columns = FALSE, remove.key = F)
PCHeatmap(object = w19, pc.use = 1:5, cells.use = 195, do.balanced = TRUE, label.columns = FALSE, remove.key = FALSE)
PCHeatmap(object = w19, pc.use = 1, cells.use = 195, do.balanced = TRUE, label.columns = FALSE, remove.key = FALSE)
?DimHeatmap
PCHeatmap(object = w19, pc.use = 1, do.balanced = TRUE, label.columns = FALSE, remove.key = FALSE, col.use = YellowAndPurple())
PCHeatmap(object = w19, pc.use = 1, do.balanced = TRUE, label.columns = FALSE, remove.key = FALSE, col.use = c("blue", "darkblue", "darkgreen", "green"))
PCHeatmap(object = w19, pc.use = 1, do.balanced = TRUE, label.columns = FALSE, remove.key = FALSE, col.use = c("blue", "darkblue", "darkgreen", "lightgreen"))
PCHeatmap(object = w19, pc.use = 1, do.balanced = TRUE, label.columns = FALSE, remove.key = FALSE, col.use = c("blue", "darkblue", "darkgreen", "goldenrod"))
PCHeatmap(object = w19, pc.use = 1, do.balanced = TRUE, label.columns = TRUE, remove.key = FALSE, col.use = c("blue", "darkblue", "darkgreen", "goldenrod"))
PCHeatmap(object = w19, pc.use = 1, do.balanced = TRUE, label.columns = TRUE, remove.key = FALSE)
PCHeatmap(object = w19, pc.use = 1:5, do.balanced = TRUE, label.columns = TRUE, remove.key = FALSE)
PCHeatmap(object = w19, pc.use = 1:5, do.balanced = TRUE, label.columns = F, remove.key = T)
JackStrawPlot(object = w19, PCs = 1:11) #seems 1-10 are sig
JackStrawPlot(object = w19, PCs = 1:12) #seems 1-10 are sig
PCAPlot(object = w19, dim.1 = 1, dim.2 = 2)
FeaturePlot(object = w19, features.plot = c("NANOG", "DPPA3", "POU5F1", "DAZL", "DDX4"), reduction.use = "pca")
TSNEPlot(w19, do.label = T)
FeaturePlot(object = w19, features.plot = c("NANOG", "DPPA3", "POU5F1", "DAZL", "DDX4"), reduction.use = "tsne")
View(w19)
w19@ident[1]
w19@ident[[1]]
count(w19@ident[[1]])
w19
names(w19@ident[(w19@ident %in% c('0','1'))])
put19WhFGC = names(w19@ident[(w19@ident %in% c('0','1'))])
cluster0 = names(w19@ident[(w19@ident %in% c('0'))])
cluster1 = names(w19@ident[(w19@ident %in% c('1'))])
cluster2 = names(w19@ident[(w19@ident %in% c('2'))])
VlnPlot(object = w19, features.plot = c("NANOG", "DPPA3", "POU5F1", "DAZL", "DDX4", "CD117"))
VlnPlot(object = w19, features.plot = c("NANOG", "DPPA3", "POU5F1", "DAZL", "DDX4", "KIT"))
FeaturePlot(object = w19, features.plot = c("NANOG", "DPPA3", "POU5F1", "DAZL", "DDX4", "KIT"), reduction.use = "tsne")
FeaturePlot(object = w19, features.plot = c("NANOG", "DPPA3", "POU5F1", "DAZL", "DDX4"), reduction.use = "pca")
FeaturePlot(object = w19, features.plot = c("NANOG", "DPPA3", "POU5F1", "DAZL", "DDX4", "KIT"), reduction.use = "pca")
